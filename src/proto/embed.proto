syntax = "proto3";

package proto;

service EmbeddingService {
  rpc GetEmbeddings (EmbeddingRequest) returns (EmbeddingResponse) {}

  rpc LoadModel (LoadModelRequest) returns (LoadModelResponse) {}

  rpc ProcessFileStream (stream FileStreamRequest) returns (FileStreamResponse) {}

  rpc GetStatus (StatusRequest) returns (StatusResponse) {}

  rpc ListModels (ListModelsRequest) returns (ListModelsResponse) {}

  // NEW: Update model config and qdrant collection at runtime
  rpc UpdateModelConfig (UpdateModelConfigRequest) returns (UpdateModelConfigResponse) {}
}

message EmbeddingRequest {
  repeated string texts = 1;
  string model_name = 2;
}

message EmbeddingResponse {
  repeated Embedding embeddings = 1;
}

message Embedding {
  repeated float vector = 1;
  int32 dimension = 2;
}

message LoadModelRequest {
  string model_name = 1;
  optional bool use_cuda = 2;
  optional int32 max_length = 3;
  optional int32 threads = 4;
}

message LoadModelResponse {
  bool success = 1;
  string message = 2;
  optional string model_info = 3;
}

message FileMetadata {
  string filename = 1;
  string content_type = 2;
  int64 file_size = 3;
  map<string, string> custom_metadata = 4;
  string document_id = 5;
}

message ProcessingOptions {
  int32 chunk_size = 1;
  int32 chunk_overlap = 2;
  bool store_in_qdrant = 3;
  string collection_name = 4;
}

message FileStreamRequest {
  oneof content {
    FileMetadata metadata = 1;
    bytes chunk_data = 2;
    ProcessingOptions options = 3;
  }
  string model_name = 4;
}

message FileStreamResponse {
  bool success = 1;
  string message = 2;
  int32 chunks_processed = 3;
  int32 embeddings_created = 4;
  int32 points_stored = 5;
  repeated string chunk_ids = 6;
  optional string document_id = 7;
}

message StatusRequest {}

message StatusResponse {
  string server_version = 1;
  string current_model = 2;
  bool cuda_available = 3;
  bool qdrant_connected = 4;
  map<string, string> configuration = 5;
  int64 uptime_seconds = 6;
}

message ListModelsRequest {}

message ModelInfo {
  string model_name = 1;
  int32 dimensions = 2;
  int32 max_length = 3;
  int32 default_chunk_size = 4;
  float size_gb = 5;
  string license = 6;
  string description = 7;
}

message ListModelsResponse {
  repeated ModelInfo models = 1;
}

// ========== NEW FOR DYNAMIC CONFIG UPDATE ==========
message UpdateModelConfigRequest {
  string model_name = 1;
  string qdrant_collection = 2;
}

message UpdateModelConfigResponse {
  bool success = 1;
  string message = 2;
  string active_model = 3;
  int32 chunk_size = 4;
  int32 chunk_overlap = 5;
  string qdrant_collection = 6;
}
